<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Cart</title>
  <style>
    /* Basic styling */
    #cartItems div {
      border: 1px solid #ccc;
      padding: 10px;
      margin: 10px;
    }
    .cart-item {
      margin-bottom: 20px;
      display: flex;
      align-items: center;
    }
    .cart-item img {
      max-width: 100px;
      margin-right: 20px;
    }
    .quantity-controls {
      display: flex;
      align-items: center;
    }
    .quantity-controls button {
      margin: 0 5px;
    }
  </style>
</head>
<body>

  <%- include('navBar') %>

  <h1>Your Cart</h1>
  <div id="cartItems">
    <% if (cart.items.length === 0) { %>
      <p>Your cart is empty</p>
    <% } else { %>
      <% cart.items.forEach(item => { %>
        <div class="cart-item">
          <img src="<%= item.imageUrl %>" alt="<%= item.cropName %> image">
          <div>
            <h3><%= item.cropName %></h3>
            <div class="quantity-controls">
              <button onclick="adjustQuantity('<%= item.cropName %>', -1)">-</button>
              <p>Quantity: <input type="number" id="quantity-<%= item.cropName %>" value="<%= item.quantity %>" min="1" readonly></p>
              <button onclick="adjustQuantity('<%= item.cropName %>', 1)">+</button>
            </div>
            <p>Price per Bag: $<span id="pricePerBag-<%= item.cropName %>"><%= parseFloat(item.pricePerBag).toFixed(2) %></span></p>
            <p>Total Price: $<span id="total-<%= item.cropName %>"><%= (item.quantity * item.pricePerBag).toFixed(2) %></span></p>
            
            <button onclick="removeFromCart('<%= item.cropName %>')">Remove</button>
          </div>
        </div>
      <% }) %>
      <div>
        <h3>Total Cart Price: $<span id="totalCartPrice"><%= cart.totalPrice.toFixed(2) %></span></h3>
      </div>
    <% } %>
  </div>

  <div id="cartData" style="display:none;">
    <%= JSON.stringify(cart.items) %>
  </div>

  <button onclick="checkout()">Checkout</button>

  <script>
    // Function to adjust quantity and update the total price and the database
  function adjustQuantity(cropName, quantityChange) {
  const quantityInput = document.getElementById(`quantity-${cropName}`);
  let currentQuantity = parseInt(quantityInput.value);
  currentQuantity += quantityChange;

  // Prevent quantity from being less than 1
  if (currentQuantity < 1) {
    alert('Quantity cannot be less than 1');
    currentQuantity = 1;
  }

  quantityInput.value = currentQuantity;

  // Recalculate item and total price on quantity adjustment
  updateTotalPrice(cropName, currentQuantity);

  // Automatically update the quantity in the database
  updateItemQuantity(cropName, currentQuantity);
  }

    // Function to update total price when quantity changes
    function updateTotalPrice(cropName, quantity) {
      const pricePerBagElement = document.getElementById(`pricePerBag-${cropName}`);
      const totalPriceElement = document.getElementById(`total-${cropName}`);
      const itemPrice = parseFloat(pricePerBagElement.innerText);
      const newTotalPrice = (quantity * itemPrice).toFixed(2);

      totalPriceElement.innerText = newTotalPrice;

      // Recalculate the cart's total price
      updateCartTotalPrice();
    }

    // Function to send updated quantity to the backend
    async function updateItemQuantity(cropName, quantity) {
  try {
    const response = await fetch('update', {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ cropName, quantity }),
    });

    // Check if the response is not OK
    if (!response.ok) {
      // Parse the error response
      const errorData = await response.json();
      
      if (errorData.message && errorData.availableStock !== undefined) {
        // Show the alert if the stock is exceeded
        alert(`Error: ${errorData.message} Available stock: ${errorData.availableStock}`);
      } else {
        alert('Failed to update quantity. Please try again later.');
      }
      return;
    }

    // If the request succeeds, proceed normally
    const updatedCart = await response.json();
    console.log('Cart updated successfully', updatedCart);

  } catch (error) {
    console.error('Error in fetch request:', error);
    alert('An error occurred while updating the cart.');
  }
}

    // Function to recalculate and update the total cart price
    function updateCartTotalPrice() {
      let totalCartPrice = 0;
      const totalPriceElements = document.querySelectorAll('[id^="total-"]');

      totalPriceElements.forEach(element => {
        totalCartPrice += parseFloat(element.innerText);
      });

      document.getElementById('totalCartPrice').innerText = totalCartPrice.toFixed(2);
    }

    // Function to remove item from the cart
    async function removeFromCart(cropName) {
      try {
        const response = await fetch(`remove/${cropName}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          alert('Item removed from cart!');
          location.reload(); // Reload the cart to reflect changes
        } else {
          throw new Error('Failed to remove item from cart');
        }
      } catch (error) {
        alert(error.message);
      }
    }

    // Function to handle checkout
    async function checkout() {
      try {
        const cartDataElement = document.getElementById('cartData');
        const cartItems = JSON.parse(cartDataElement.innerText);

        const response = await fetch('checkout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ items: cartItems }),
        });

        if (response.ok) {
          const result = await response.json();
          alert('Redirecting to payment...');
          window.location.href = result.authorizationUrl;
        } else {
          throw new Error('Checkout failed');
        }
      } catch (error) {
        alert('An error occurred during checkout.');
      }
    }
  </script>
</body>
</html>
